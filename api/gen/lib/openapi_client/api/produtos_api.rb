=begin
#TagProducts API

#API de produtos (GET/POST e importação CSV). Todas as rotas aplicam delay artificial de ~3s no backend. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class ProdutosApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Criação de produto
    # @param produto_input [ProdutoInput] 
    # @param [Hash] opts the optional parameters
    # @return [Produto]
    def create_produto(produto_input, opts = {})
      data, _status_code, _headers = create_produto_with_http_info(produto_input, opts)
      data
    end

    # Criação de produto
    # @param produto_input [ProdutoInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Produto, Integer, Hash)>] Produto data, response status code and response headers
    def create_produto_with_http_info(produto_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProdutosApi.create_produto ...'
      end
      # verify the required parameter 'produto_input' is set
      if @api_client.config.client_side_validation && produto_input.nil?
        fail ArgumentError, "Missing the required parameter 'produto_input' when calling ProdutosApi.create_produto"
      end
      # resource path
      local_var_path = '/api/v1/produtos'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(produto_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Produto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProdutosApi.create_produto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProdutosApi#create_produto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Importação de produtos via CSV
    # Recebe arquivo .csv (até 10MB) com cabeçalho flexível. A validação é a mesma do POST /api/v1/produtos (imagem opcional). 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def import_produtos_csv(file, opts = {})
      import_produtos_csv_with_http_info(file, opts)
      nil
    end

    # Importação de produtos via CSV
    # Recebe arquivo .csv (até 10MB) com cabeçalho flexível. A validação é a mesma do POST /api/v1/produtos (imagem opcional). 
    # @param file [File] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def import_produtos_csv_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProdutosApi.import_produtos_csv ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ProdutosApi.import_produtos_csv"
      end
      # resource path
      local_var_path = '/api/v1/produtos/importacao'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProdutosApi.import_produtos_csv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProdutosApi#import_produtos_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listagem de produtos
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Número da página (&gt;&#x3D; 1). Default 1. (default to 1)
    # @option opts [Integer] :limit Limite por página. &#x60;10&#x60;, &#x60;20&#x60;, &#x60;50&#x60; ou &#x60;0&#x3D;Todos&#x60; (sem paginação). (default to 10)
    # @return [Array<Produto>]
    def list_produtos(opts = {})
      data, _status_code, _headers = list_produtos_with_http_info(opts)
      data
    end

    # Listagem de produtos
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Número da página (&gt;&#x3D; 1). Default 1. (default to 1)
    # @option opts [Integer] :limit Limite por página. &#x60;10&#x60;, &#x60;20&#x60;, &#x60;50&#x60; ou &#x60;0&#x3D;Todos&#x60; (sem paginação). (default to 10)
    # @return [Array<(Array<Produto>, Integer, Hash)>] Array<Produto> data, response status code and response headers
    def list_produtos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProdutosApi.list_produtos ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ProdutosApi.list_produtos, must be greater than or equal to 1.'
      end

      allowable_values = [10, 20, 50, 0]
      if @api_client.config.client_side_validation && opts[:'limit'] && !allowable_values.include?(opts[:'limit'])
        fail ArgumentError, "invalid value for \"limit\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/produtos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Produto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProdutosApi.list_produtos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProdutosApi#list_produtos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
